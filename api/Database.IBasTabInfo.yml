### YamlMime:ManagedReference
items:
- uid: Database.IBasTabInfo
  commentId: T:Database.IBasTabInfo
  id: IBasTabInfo
  parent: Database
  children:
  - Database.IBasTabInfo.Columns
  - Database.IBasTabInfo.Ids
  - Database.IBasTabInfo.TabName
  langs:
  - csharp
  - vb
  name: IBasTabInfo
  nameWithType: IBasTabInfo
  fullName: Database.IBasTabInfo
  type: Interface
  source:
    id: IBasTabInfo
    path: C:\Temp\MixingApplication\Database\TableInfo.cs
    startLine: 42
  assemblies:
  - Database
  namespace: Database
  summary: "\nBasic interface for a database table.\n<p>Creation revision: 001</p> \n"
  example: []
  syntax:
    content: public interface IBasTabInfo
    content.vb: Public Interface IBasTabInfo
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Database.IBasTabInfo.TabName
  commentId: P:Database.IBasTabInfo.TabName
  id: TabName
  parent: Database.IBasTabInfo
  langs:
  - csharp
  - vb
  name: TabName
  nameWithType: IBasTabInfo.TabName
  fullName: Database.IBasTabInfo.TabName
  type: Property
  source:
    id: TabName
    path: C:\Temp\MixingApplication\Database\TableInfo.cs
    startLine: 45
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: string TabName { get; }
    parameters: []
    return:
      type: System.String
      description: Name of the database table
    content.vb: ReadOnly Property TabName As String
  overload: Database.IBasTabInfo.TabName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Database.IBasTabInfo.Columns
  commentId: P:Database.IBasTabInfo.Columns
  id: Columns
  parent: Database.IBasTabInfo
  langs:
  - csharp
  - vb
  name: Columns
  nameWithType: IBasTabInfo.Columns
  fullName: Database.IBasTabInfo.Columns
  type: Property
  source:
    id: Columns
    path: C:\Temp\MixingApplication\Database\TableInfo.cs
    startLine: 47
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: List<Column> Columns { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Database.Column}
      description: Columns of the database table
    content.vb: Property Columns As List(Of Column)
  overload: Database.IBasTabInfo.Columns*
  modifiers.csharp:
  - get
  - set
- uid: Database.IBasTabInfo.Ids
  commentId: P:Database.IBasTabInfo.Ids
  id: Ids
  parent: Database.IBasTabInfo
  langs:
  - csharp
  - vb
  name: Ids
  nameWithType: IBasTabInfo.Ids
  fullName: Database.IBasTabInfo.Ids
  type: Property
  source:
    id: Ids
    path: C:\Temp\MixingApplication\Database\TableInfo.cs
    startLine: 49
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: string[] Ids { get; }
    parameters: []
    return:
      type: System.String[]
      description: Name of the columns of the database table
    content.vb: ReadOnly Property Ids As String()
  overload: Database.IBasTabInfo.Ids*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Database
  commentId: N:Database
  name: Database
  nameWithType: Database
  fullName: Database
- uid: Database.IBasTabInfo.TabName*
  commentId: Overload:Database.IBasTabInfo.TabName
  name: TabName
  nameWithType: IBasTabInfo.TabName
  fullName: Database.IBasTabInfo.TabName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Database.IBasTabInfo.Columns*
  commentId: Overload:Database.IBasTabInfo.Columns
  name: Columns
  nameWithType: IBasTabInfo.Columns
  fullName: Database.IBasTabInfo.Columns
- uid: System.Collections.Generic.List{Database.Column}
  commentId: T:System.Collections.Generic.List{Database.Column}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Column>
  nameWithType: List<Column>
  fullName: System.Collections.Generic.List<Database.Column>
  nameWithType.vb: List(Of Column)
  fullName.vb: System.Collections.Generic.List(Of Database.Column)
  name.vb: List(Of Column)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Database.Column
    name: Column
    nameWithType: Column
    fullName: Database.Column
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Database.Column
    name: Column
    nameWithType: Column
    fullName: Database.Column
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Database.IBasTabInfo.Ids*
  commentId: Overload:Database.IBasTabInfo.Ids
  name: Ids
  nameWithType: IBasTabInfo.Ids
  fullName: Database.IBasTabInfo.Ids
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
