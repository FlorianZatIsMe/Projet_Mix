### YamlMime:ManagedReference
items:
- uid: Database.ReadInfo
  commentId: T:Database.ReadInfo
  id: ReadInfo
  parent: Database
  children:
  - Database.ReadInfo.#ctor(Database.IComTabInfo,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String[],System.String)
  - Database.ReadInfo.#ctor(Database.ReadInfo,Database.IComTabInfo)
  - Database.ReadInfo.CustomWhere
  - Database.ReadInfo.DtAfter
  - Database.ReadInfo.DtBefore
  - Database.ReadInfo.EventTypes
  - Database.ReadInfo.IsOrderAsc
  - Database.ReadInfo.OrderBy
  - Database.ReadInfo.TableInfo
  langs:
  - csharp
  - vb
  name: ReadInfo
  nameWithType: ReadInfo
  fullName: Database.ReadInfo
  type: Class
  source:
    id: ReadInfo
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 119
  assemblies:
  - Database
  namespace: Database
  summary: "\nClass containing the parameters required by other method (usually to select one or several row in a database table)\n"
  example: []
  syntax:
    content: public class ReadInfo
    content.vb: Public Class ReadInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Database.ReadInfo.TableInfo
  commentId: P:Database.ReadInfo.TableInfo
  id: TableInfo
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: TableInfo
  nameWithType: ReadInfo.TableInfo
  fullName: Database.ReadInfo.TableInfo
  type: Property
  source:
    id: TableInfo
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 122
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public IComTabInfo TableInfo { get; }
    parameters: []
    return:
      type: Database.IComTabInfo
      description: Object of database table. The values of this object can be used to select a set of rows
    content.vb: Public ReadOnly Property TableInfo As IComTabInfo
  overload: Database.ReadInfo.TableInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.OrderBy
  commentId: P:Database.ReadInfo.OrderBy
  id: OrderBy
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: OrderBy
  nameWithType: ReadInfo.OrderBy
  fullName: Database.ReadInfo.OrderBy
  type: Property
  source:
    id: OrderBy
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 125
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public string OrderBy { get; }
    parameters: []
    return:
      type: System.String
      description: Must contains the id of the column to use to sort the rows
    content.vb: Public ReadOnly Property OrderBy As String
  overload: Database.ReadInfo.OrderBy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.IsOrderAsc
  commentId: P:Database.ReadInfo.IsOrderAsc
  id: IsOrderAsc
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: IsOrderAsc
  nameWithType: ReadInfo.IsOrderAsc
  fullName: Database.ReadInfo.IsOrderAsc
  type: Property
  source:
    id: IsOrderAsc
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 128
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public bool IsOrderAsc { get; }
    parameters: []
    return:
      type: System.Boolean
      description: If value value = true then the order of the sort is ascending. Descending if false
    content.vb: Public ReadOnly Property IsOrderAsc As Boolean
  overload: Database.ReadInfo.IsOrderAsc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.DtBefore
  commentId: P:Database.ReadInfo.DtBefore
  id: DtBefore
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: DtBefore
  nameWithType: ReadInfo.DtBefore
  fullName: Database.ReadInfo.DtBefore
  type: Property
  source:
    id: DtBefore
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 131
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public DateTime? DtBefore { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
      description: 'Used for tables containing a date and time column: date and time of the first row to filter'
    content.vb: Public ReadOnly Property DtBefore As Date?
  overload: Database.ReadInfo.DtBefore*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.DtAfter
  commentId: P:Database.ReadInfo.DtAfter
  id: DtAfter
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: DtAfter
  nameWithType: ReadInfo.DtAfter
  fullName: Database.ReadInfo.DtAfter
  type: Property
  source:
    id: DtAfter
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 134
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public DateTime? DtAfter { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
      description: 'Used for tables containing a date and time column: date and time of the last row to filter'
    content.vb: Public ReadOnly Property DtAfter As Date?
  overload: Database.ReadInfo.DtAfter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.EventTypes
  commentId: P:Database.ReadInfo.EventTypes
  id: EventTypes
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: EventTypes
  nameWithType: ReadInfo.EventTypes
  fullName: Database.ReadInfo.EventTypes
  type: Property
  source:
    id: EventTypes
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 137
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public string[] EventTypes { get; }
    parameters: []
    return:
      type: System.String[]
      description: Used for tables containing an event type column. List of event types to filter
    content.vb: Public ReadOnly Property EventTypes As String()
  overload: Database.ReadInfo.EventTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.CustomWhere
  commentId: P:Database.ReadInfo.CustomWhere
  id: CustomWhere
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: CustomWhere
  nameWithType: ReadInfo.CustomWhere
  fullName: Database.ReadInfo.CustomWhere
  type: Property
  source:
    id: CustomWhere
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 140
  assemblies:
  - Database
  namespace: Database
  example: []
  syntax:
    content: public string CustomWhere { get; }
    parameters: []
    return:
      type: System.String
      description: Parameter containing a custom SQL command to put after the WHERE statetement
    content.vb: Public ReadOnly Property CustomWhere As String
  overload: Database.ReadInfo.CustomWhere*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Database.ReadInfo.#ctor(Database.IComTabInfo,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String[],System.String)
  commentId: M:Database.ReadInfo.#ctor(Database.IComTabInfo,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String[],System.String)
  id: '#ctor(Database.IComTabInfo,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String[],System.String)'
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: ReadInfo(IComTabInfo, String, Boolean, Nullable<DateTime>, Nullable<DateTime>, String[], String)
  nameWithType: ReadInfo.ReadInfo(IComTabInfo, String, Boolean, Nullable<DateTime>, Nullable<DateTime>, String[], String)
  fullName: Database.ReadInfo.ReadInfo(Database.IComTabInfo, System.String, System.Boolean, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.String[], System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 152
  assemblies:
  - Database
  namespace: Database
  summary: "\nInitialize all variables of the class from parameters\n"
  example: []
  syntax:
    content: public ReadInfo(IComTabInfo _tableInfo = null, string _orderBy = null, bool _isOrderAsc = true, DateTime? _dtBefore = null, DateTime? _dtAfter = null, string[] _eventTypes = null, string _customWhere = "")
    parameters:
    - id: _tableInfo
      type: Database.IComTabInfo
      description: <xref href="Database.ReadInfo.TableInfo" data-throw-if-not-resolved="false"></xref>
    - id: _orderBy
      type: System.String
      description: <xref href="Database.ReadInfo.OrderBy" data-throw-if-not-resolved="false"></xref>
    - id: _isOrderAsc
      type: System.Boolean
      description: <xref href="Database.ReadInfo.IsOrderAsc" data-throw-if-not-resolved="false"></xref>
    - id: _dtBefore
      type: System.Nullable{System.DateTime}
      description: <xref href="Database.ReadInfo.DtBefore" data-throw-if-not-resolved="false"></xref>
    - id: _dtAfter
      type: System.Nullable{System.DateTime}
      description: <xref href="Database.ReadInfo.DtAfter" data-throw-if-not-resolved="false"></xref>
    - id: _eventTypes
      type: System.String[]
      description: <xref href="Database.ReadInfo.EventTypes" data-throw-if-not-resolved="false"></xref>
    - id: _customWhere
      type: System.String
      description: <xref href="Database.ReadInfo.CustomWhere" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(_tableInfo As IComTabInfo = Nothing, _orderBy As String = Nothing, _isOrderAsc As Boolean = True, _dtBefore As Date? = Nothing, _dtAfter As Date? = Nothing, _eventTypes As String() = Nothing, _customWhere As String = "")
  overload: Database.ReadInfo.#ctor*
  nameWithType.vb: ReadInfo.ReadInfo(IComTabInfo, String, Boolean, Nullable(Of DateTime), Nullable(Of DateTime), String(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Database.ReadInfo.ReadInfo(Database.IComTabInfo, System.String, System.Boolean, System.Nullable(Of System.DateTime), System.Nullable(Of System.DateTime), System.String(), System.String)
  name.vb: ReadInfo(IComTabInfo, String, Boolean, Nullable(Of DateTime), Nullable(Of DateTime), String(), String)
- uid: Database.ReadInfo.#ctor(Database.ReadInfo,Database.IComTabInfo)
  commentId: M:Database.ReadInfo.#ctor(Database.ReadInfo,Database.IComTabInfo)
  id: '#ctor(Database.ReadInfo,Database.IComTabInfo)'
  parent: Database.ReadInfo
  langs:
  - csharp
  - vb
  name: ReadInfo(ReadInfo, IComTabInfo)
  nameWithType: ReadInfo.ReadInfo(ReadInfo, IComTabInfo)
  fullName: Database.ReadInfo.ReadInfo(Database.ReadInfo, Database.IComTabInfo)
  type: Constructor
  source:
    id: .ctor
    path: C:\Temp\MixingApplication\Database\MyDatabase.cs
    startLine: 175
  assemblies:
  - Database
  namespace: Database
  summary: "\nInitialize all variables of the class from another object of the same class (the database table is replaced though)\n"
  example: []
  syntax:
    content: public ReadInfo(ReadInfo _readInfo, IComTabInfo _tableInfo = null)
    parameters:
    - id: _readInfo
      type: Database.ReadInfo
      description: Object of the same class
    - id: _tableInfo
      type: Database.IComTabInfo
      description: <xref href="Database.ReadInfo.TableInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(_readInfo As ReadInfo, _tableInfo As IComTabInfo = Nothing)
  overload: Database.ReadInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Database
  commentId: N:Database
  name: Database
  nameWithType: Database
  fullName: Database
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Database.ReadInfo.TableInfo*
  commentId: Overload:Database.ReadInfo.TableInfo
  name: TableInfo
  nameWithType: ReadInfo.TableInfo
  fullName: Database.ReadInfo.TableInfo
- uid: Database.IComTabInfo
  commentId: T:Database.IComTabInfo
  parent: Database
  name: IComTabInfo
  nameWithType: IComTabInfo
  fullName: Database.IComTabInfo
- uid: Database.ReadInfo.OrderBy*
  commentId: Overload:Database.ReadInfo.OrderBy
  name: OrderBy
  nameWithType: ReadInfo.OrderBy
  fullName: Database.ReadInfo.OrderBy
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Database.ReadInfo.IsOrderAsc*
  commentId: Overload:Database.ReadInfo.IsOrderAsc
  name: IsOrderAsc
  nameWithType: ReadInfo.IsOrderAsc
  fullName: Database.ReadInfo.IsOrderAsc
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Database.ReadInfo.DtBefore*
  commentId: Overload:Database.ReadInfo.DtBefore
  name: DtBefore
  nameWithType: ReadInfo.DtBefore
  fullName: Database.ReadInfo.DtBefore
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Database.ReadInfo.DtAfter*
  commentId: Overload:Database.ReadInfo.DtAfter
  name: DtAfter
  nameWithType: ReadInfo.DtAfter
  fullName: Database.ReadInfo.DtAfter
- uid: Database.ReadInfo.EventTypes*
  commentId: Overload:Database.ReadInfo.EventTypes
  name: EventTypes
  nameWithType: ReadInfo.EventTypes
  fullName: Database.ReadInfo.EventTypes
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Database.ReadInfo.CustomWhere*
  commentId: Overload:Database.ReadInfo.CustomWhere
  name: CustomWhere
  nameWithType: ReadInfo.CustomWhere
  fullName: Database.ReadInfo.CustomWhere
- uid: Database.ReadInfo.TableInfo
  commentId: P:Database.ReadInfo.TableInfo
  isExternal: true
- uid: Database.ReadInfo.OrderBy
  commentId: P:Database.ReadInfo.OrderBy
  isExternal: true
- uid: Database.ReadInfo.IsOrderAsc
  commentId: P:Database.ReadInfo.IsOrderAsc
  isExternal: true
- uid: Database.ReadInfo.DtBefore
  commentId: P:Database.ReadInfo.DtBefore
  isExternal: true
- uid: Database.ReadInfo.DtAfter
  commentId: P:Database.ReadInfo.DtAfter
  isExternal: true
- uid: Database.ReadInfo.EventTypes
  commentId: P:Database.ReadInfo.EventTypes
  isExternal: true
- uid: Database.ReadInfo.CustomWhere
  commentId: P:Database.ReadInfo.CustomWhere
  isExternal: true
- uid: Database.ReadInfo.#ctor*
  commentId: Overload:Database.ReadInfo.#ctor
  name: ReadInfo
  nameWithType: ReadInfo.ReadInfo
  fullName: Database.ReadInfo.ReadInfo
- uid: Database.ReadInfo
  commentId: T:Database.ReadInfo
  parent: Database
  name: ReadInfo
  nameWithType: ReadInfo
  fullName: Database.ReadInfo
